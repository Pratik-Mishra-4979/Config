i+TITLE:Pratik's GNU Emacs Config
#+AUTHOR: Pratik Mishra
#+DESCRIPTION: Pratik's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
-  [[#early-initel][early-init.el]]
  - [[#startup-buffer][Startup buffer]]
  - [[#elpaca-package-setup][Elpaca package setup]]
  - [[#language-environment][Language Environment]]
  - [[#performance-boost][Performance boost]]
  - [[#garbage-collection-threshold-increase][Garbage collection threshold increase]]
-  [[#initel][init.el]]
  - [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#all-the-icons][All the icons.]]
  - [[#calendar][Calendar]]
  - [[#dashboard][Dashboard]]
  - [[#denote][Denote]]
  - [[#dont-clutter][Don't clutter]]
  - [[#elfeed][Elfeed]]
  - [[#flyspell][Flyspell]]
  - [[#font][Font]]
  - [[#git-bash-utls][Git bash utls]]
  - [[#music][Music]]
  - [[#modeline][Modeline]]
  - [[#org-mode][Org Mode]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#shell][Shell]]
  - [[#themes][Themes]]
  - [[#transparency][Transparency]]
  - [[#visual-upgrades][Visual Upgrades]]
  - [[#vertico--orderless--marginilia--embark---setup][Vertico + orderless + marginilia + embark + .. setup]]
  - [[#which-key][Which Key]]
  - [[#whitespace-cleanup][Whitespace-cleanup]]
  - [[#zooming-inout][Zooming In/Out]]

*  early-init.el
** Startup buffer
#+begin_src emacs-lisp :tangle "early-init.el"
(setq frame-inhibit-implied-resize t)
(push '(visibility . nil) default-frame-alist)
#+end_src

** Elpaca package setup
Lazy loading packages.
#+begin_src emacs-lisp :tangle "early-init.el"
(setq package-enable-at-startup nil)
#+end_src

** Language Environment
#+begin_src emacs-lisp :tangle "early-init.el"
(set-language-environment "UTF-8")
(setq default-input-method nil) ;; not required
#+end_src

** Performance boost
#+begin_src emacs-lisp :tangle "early-init.el"
(menu-bar-mode -1)           ;; Disable the menu bar 
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar

;; Disable GUIs because they are inconsistent across systems, desktop environments, and themes, and they don't match the look of Emacs.
(setq use-file-dialog nil)
(setq use-dialog-box nil)

;; Increase how much is read from processes in a single chunk
(setq read-process-output-max (* 2 1024 1024))  ; 1024kb
(setq process-adaptive-read-buffering nil)

(setq ffap-machine-p-known 'reject);; Don't ping things that look like domain names.

;; Reduce *Message* noise at startup. An empty scratch buffer (or thedashboard) is more than enough, and faster to display.
  (setq inhibit-startup-screen t
        inhibit-startup-echo-area-message user-login-name)
  (setq initial-buffer-choice nil
        inhibit-startup-buffer-menu t
        inhibit-x-resources t)

(setq inhibit-compacting-font-caches t) ;; Font compacting is useless unless you use multiple languages.

;; Disable bidirectional text scanning for a modest performance boost.
(setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

(setq bidi-inhibit-bpa t) ;; Give up some bidirectional functionality for slightly faster re-display.

(setq inhibit-splash-screen t) ;; Disable startup screens and messages
 (advice-add 'display-startup-echo-area-message :override #'ignore) ;; Remove "For information about GNU Emacs..." message at startup
 (advice-add 'display-startup-screen :override #'ignore)  ;; Suppress the vanilla startup screen completely. We've disabled it with`inhibit-startup-screen', but it would still initialize anyway.
#+end_src

** Garbage collection threshold increase
#+begin_src emacs-lisp :tangle "early-init.el"
(setq gc-cons-threshold 100000000)
(setq gc-cons-percentage 0.6)
#+end_src

*  init.el
** IMPORTANT PROGRAMS TO LOAD FIRST
*** Adding the scripts directory to path
#+begin_src emacs-lisp :tangle "init.el"
(add-to-list 'load-path "~/.emacs.d/.config/scripts/")
#+end_src

*** Sourcing the scripts
#+begin_src emacs-lisp :tangle "init.el"
  (require 'elpaca-setup);; The elpaca package manager
  (require 'pratik-mode) ;; Pratik modes setup
  (require 'buffer-move)   ;; Buffer-move for better window management
#+end_src
*** Development org-mode for async latex 

*** Garbage collection reset and threshold increase
#+begin_src emacs-lisp :tangle "init.el"
(add-hook 'emacs-startup-hook (lambda () (setq gc-cons-threshold 20000000) 
				(setq gc-cons-percentage 0.1)))
#+end_src

** All the icons.
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp :tangle "init.el"
(use-package all-the-icons
  :ensure t
  :demand t
  :if (display-graphic-p))

(use-package all-the-icons-dired :ensure t 
  :after all-the-icons ;; makes sure icons are loaded first
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t)))
  :if (display-graphic-p))

;; all the icons completion adds icons to mini buffers.

(use-package all-the-icons-completion :ensure t
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode 1))

#+end_src

** Calendar
install calfw and make it sync with google calendar. set it up when requried.

** Dashboard
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp :tangle "init.el"

(defun my/dashboard-draw-empty-banner ()
  "Override dashboard's banner drawing function to do nothing."
  (message "Dashboard banner disabled."))

;; Override the default banner drawing function
(advice-add 'dashboard-insert-banner :override #'my/dashboard-draw-empty-banner)

  (use-package dashboard
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-footer-messages '("Atleast Start."))
    (setq dashboard-banner-logo-title "Little by little, one travels far.")
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 3)
                            (agenda . 5)
                            (bookmarks . 5)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))

;; make the frame visible
(add-hook 'emacs-startup-hook (lambda () (modify-frame-parameters (selected-frame) '((visibility . t))))) 
#+end_src

** Denote
#+begin_src emacs-lisp :tangle "init.el"
(use-package denote
 :ensure t
 :hook (dired-mode . denote-dired-mode)
 :bind (("C-c n n" . denote)
        ("C-c n r" . denote-rename-file)
	("C-c n l" . denote-link)
	("C-c n b" . denote-backlinks)
	("C-c n d" . denote-dired)
	("C-c n g" . denote-grep))
 :config (setq denote-directory (expand-file-name "~/notes/"))
(denote-rename-buffer-mode 1)
 )
#+end_src

** Don't clutter 
#+begin_src emacs-lisp :tangle "init.el"
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/backups/" t)))
#+end_src

** Elfeed
#+begin_src emacs-lisp :tangle "init.el"
(use-package elfeed :ensure t
  :init
        (setq elfeed-enclosure-default-dir "~/Downloads/")
        (setq elfeed-show-entry-switch 'switch-to-buffer)
	(setq shr-max-image-proportion 0.6)
	(setq elfeed-search-filter "@2-weeks-ago +unread")
	(setq elfeed-search-title-max-width 100)
	(setq elfeed-search-title-min-width 30)
	(setq elfeed-search-trailing-width 25)
	(setq elfeed-show-unique-buffers nil)
  :config
        (setq elfeed-feeds (quote 
		    (
		     ("https://frontline.thehindu.com/feeder/default.rss" TheHindu)
		     ("https://cfo.economictimes.indiatimes.com/rss/tax-legal-accounting" ET TaxLegAcc)
		     ("https://cfo.economictimes.indiatimes.com/rss/corporate-finance" ET CF)
		     ("https://cfo.economictimes.indiatimes.com/rss/esg" ET ESG)
		     ("https://cfo.economictimes.indiatimes.com/rss/strategy-operations" ET StratOper)
		     ("https://cfo.economictimes.indiatimes.com/rss/policy" ET policy)
		     ("https://cfo.economictimes.indiatimes.com/rss/leadership" ET leadership)
		     ("https://cfo.economictimes.indiatimes.com/rss/governance-risk-compliance" ET Gov-riskcomp)
		     ("https://cfo.economictimes.indiatimes.com/rss/economy" ET economy)
		     ("https://rbi.org.in/pressreleases_rss.xml" RBI PR)
		     ("https://rbi.org.in/notifications_rss.xml" RBI notif)
))))

;; When i was using q to kill the buffer, my hook was being called and mode change was initiated but immediately after that buffer is killed and change cannot happen as when a window is killed all the process ocuuring. This did not happen when i killed the buffer from M-x elfeed-kill-buffer as the code gets executed from minibuffer which is still active. 

(defun pratik/elfeed-kill-buffer ()
  "Kill Elfeed buffer and restore pratik-mode afterwards safely."
 (interactive)
 (elfeed-kill-buffer)
 (run-at-time 0 nil 'pratik--maybe-restore-pratik-mode))
  ;;This delays the time when restore command is executed to a little later till the buffer is killed.

;; Hooks for elfeed
(add-hook 'elfeed-search-mode-hook 'elfeed-update) ;; Updates elfeed whenever elfeed is started.
(add-hook 'elfeed-search-mode-hook 'pratik--maybe-disable-pratik-mode) ;; Turns off pratik mode when elfeed starts.
(add-hook 'elfeed-show-mode-hook (lambda () (display-line-numbers-mode 0))) ;; Turn off line numbers in elfeed-show-mode.
(add-hook 'elfeed-mode-hook (lambda () (display-line-numbers-mode 1))) ;; Turn line numbers back on in other modes. 

;; Keybindings for navigating elfeed entries
(with-eval-after-load 'elfeed-search
 (define-key elfeed-search-mode-map (kbd "n") #'elfeed-next-entry)
 (define-key elfeed-search-mode-map (kbd "q") #'pratik/elfeed-kill-buffer)
 (define-key elfeed-search-mode-map (kbd "p") #'elfeed-previous-entry))

#+end_src

** Flyspell
downloaded hunspell
#+begin_src emacs-lisp :tangle "init.el"
(use-package ispell
  :ensure nil
  :config
  (setq-default ispell-program-name "~/hunspell/hunspell.exe")
  (setq ispell-dictionary "en_US")
  (setq ispell-quietly t)
  (setq flyspell-issue-welcome-flag nil)
  (setq flyspell-issue-message-flag nil)
  (setq ispell-local-dictionary "en_US")
  (setq ispell-extra-args '("-d" "en_US"))
  (setq ispell-local-dictionary-alist
      '(("en_US" "[A-Za-z]" "[^A-Za-z]" "[']" nil nil nil utf-8)))
  (setq ispell-hunspell-dictionary-alist
        '(("en_US"
           "~/hunspell/en_US.aff"
           "~/hunspell/en_US.dic"
           "~/hunspell/.hunspell_en_US"
           nil nil nil "utf-8"))))

(use-package flyspell
  :ensure nil
  :bind 
   ( :map flyspell-mode-map 
     ("<mouse-3>" . flyspell-correct-word)
     ("<mouse-2>" . nil))
  :config)
#+end_src

** Font
#+begin_src emacs-lisp :tangle "init.el"
(set-face-attribute 'default nil
  :font "Iosevka NFM"
  :height 130
  :weight 'medium)

(set-face-attribute 'variable-pitch nil
  :font "Iosevka NFM"
  :height 130
  :weight 'medium)

(set-face-attribute 'fixed-pitch nil
  :font "Iosevka NFM"
  :height 130
  :weight 'medium)

;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "Iosevka NFM-14"))
(setq-default line-spacing 0.12)
#+end_src

** Git bash utls
This adds various utilitites to emacs without changing my system path.

#+begin_src emacs-lisp :tangle "init.el"
(let ((git-bash-bin "C:/Program Files/Git/usr/bin")
      (imagemagick-bin "C:/Program Files/ImageMagick-7.1.1-Q16-HDRI")
      (xournal-bin "C:/Users/PRATIK/AppData/Local/Programs/Xournal++/bin"))

  ;; Add to exec-path only if not already present
  (unless (member git-bash-bin exec-path)
    (add-to-list 'exec-path git-bash-bin))

  (unless (member imagemagick-bin exec-path)
    (add-to-list 'exec-path imagemagick-bin))

  (unless (member xournal-bin exec-path)
    (add-to-list 'exec-path xournal-bin)))
#+end_src

** Music
#+begin_src emacs-lisp :tangle "init.el"
;; (use-package emms :ensure t 
;;   :config
;;     (require 'emms-setup)
;;     (require 'emms-player-mpd)
;;     (require 'emms-mode-line)
;;     (require 'emms-playing-time)
;;     (emms-mode-line 1)
;;     (emms-playing-time 1)
;;     (setq emms-debug-on 1)
;;     (emms-all)
;;     (setq emms-source-file-default-directory (expand-file-name "c:/Users/PRATIK/Music/Music/*"))
;;     (setq emms-player-mpd-server-name "localhost")
;;     (setq emms-player-mpd-server-port "6600")
;;     (setq emms-player-mpd-music-directory "c:/Users/PRATIK/Music/Music/*")
;;     (add-to-list 'emms-info-functions 'emms-info-mpd)
;;     (add-to-list 'emms-player-list 'emms-player-mpd)
;;     (emms-player-mpd-connect)
;;     )
#+end_src

** Modeline 
This is the current modeline setup slowly build it up using the funcitons in pratik-modeline.el.
#+begin_src emacs-lisp :tangle "init.el"
(use-package pratik-modeline
  :ensure nil
  :config
  (setq mode-line-compact nil)
  (setq mode-line-right-align-edge 'right-margin)
  (setq-default mode-line-format
	'("%e" mode-line-front-space
	  (:propertize 
	   ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-window-dedicated) display (min-width (3.0)))
	  mode-line-frame-identification
	  pratik-modeline-state
	  " "
	  pratik-modeline-buffer-identification
	  " "
	  pratik-modeline-major-mode
	  pratik-modeline-process
	  " "
	  (project-mode-line project-mode-line-format)
	  (vc-mode vc-mode)
	  " "
	  mode-line-format-right-align
	  pratik-modeline-pomodoro-icon
	  pratik-modeline-misc-info
	  mode-line-end-spaces)))

(setq display-time-format "%d-%b %I:%M") 	  
(display-time-mode 1) ;; displays time in modeline
#+end_src

** Org Mode

#+begin_src emacs-lisp :tangle "init.el"
(use-package toc-org :ensure t 
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

#+begin_src emacs-lisp :tangle "init.el"
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets :ensure t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Org Pomodoro timer
#+begin_src emacs-lisp :tangle "init.el"
(require 'org)
(setq org-clock-sound "~/.emacs.d/.config/sounds/Interface.wav")
#+end_src

*** Org Latex Previews
#+begin_src emacs-lisp :tangle "init.el"
(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'after-save-hook
                      (lambda ()
                        (when (and (derived-mode-p 'org-mode)
                                   (save-excursion
                                     (goto-char (point-min))
                                     (re-search-forward "^#\\+STARTUP:.*latexpreview" nil t)))
                          (org-latex-preview)))
                      nil t))) ;; make after-save-hook buffer-local

(setq org-format-latex-options (plist-put org-format-latex-options :scale 2))

#+end_src

*** Org mode drag and drop mode override
This is a small code to automatically trim photos, when adding to notes.
#+begin_src emacs-lisp :tangle "init.el"

;; Define the folder where processed images will be stored
(defvar my/org-image-folder "~/notes/images/"
  "Folder where images dropped into org are copied and processed.")

(defun my/org-dnd-handle-image (uri)
  "Process image dropped into Org with ImageMagick: trim whitespace and make white transparent.
The processed image is saved to `my/org-image-folder`."
  (let* ((file (dnd-get-local-file-name uri))
         (filename (file-name-nondirectory file))
         (new-path (expand-file-name filename my/org-image-folder))
         (file-dir (file-name-directory file)))
    ;; Create the image folder if it doesn't exist
    (unless (file-directory-p my/org-image-folder)
      (make-directory my/org-image-folder t))
    (message "[my/org-dnd-handle-image] Processing %s -> %s" file new-path)
    ;; Use ImageMagick to process the image
    (shell-command
     (format "cd \"%s\" && magick \"%s\" -fuzz 20%% -trim +repage -strip \"%s\""
             file-dir file new-path))
    ;; Insert a link to the new image
    (insert (org-link-make-string (concat "file:" new-path)))))

;; Add a custom choice to the DND menu
(advice-add 'org--dnd-rmc :around
            (lambda (orig prompt choices)
              (message "[org--dnd-rmc advice] Choices: %s" choices)
              (funcall orig prompt
                       (append choices
                               '((?c "this is a dummy choice" . private))))))

;; Handle the custom 'private' DND action
(with-eval-after-load 'org
  (advice-add 'org--dnd-local-file-handler :around
              (lambda (orig url action &optional separator)
                (message "[org--dnd-local-file-handler advice] URL: %s, Action: %s" url action)
                (if (eq action 'private)
                    (progn
                      (message "[org--dnd-local-file-handler] Handling private action, calling custom handler")
                      (my/org-dnd-handle-image url))
                  (funcall orig url action separator)))))

#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |


#+begin_src emacs-lisp :tangle "init.el" 
(require 'org-tempo)
#+end_src

** Shell  
emacs on windows is using cmdproxy.exe which has weird syntax. here we configure it to use git bash.
#+begin_src emacs-lisp :tangle "init.el"
(setq shell-file-name "C:/Program Files/Git/bin/bash.exe")  ;; Git Bash path
(setq shell-command-switch "-c")  ;; Make sure Emacs passes commands to Git Bash correctly
(setq explicit-bash-args '("--login" "-i"))

#+end_src

** Themes
#+begin_src emacs-lisp :tangle "init.el"
(setq custom-safe-themes t) ;; all installed themes are safe
(use-package ef-themes :ensure t :config (load-theme 'modus-operandi t))
#+end_src

** Transparency
Enabling Transparency
#+begin_src emacs-lisp :tangle "init.el"
;;(add-to-list 'default-frame-alist '(alpha . 95)) 
#+end_src

** Visual Upgrades
The following settings are simple modes that are enabled (or disabled) so that Emacs functions more like you would expect a proper editor/IDE to function.

#+begin_src emacs-lisp :tangle "init.el"
(pixel-scroll-precision-mode 1) ;; smooth scrolling
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
;;(global-display-line-numbers-mode 1) ;; Display line numbers
(blink-cursor-mode -1) ;; disable blinking cursor
(global-visual-line-mode t)  ;; Enable truncated lines
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(defalias 'yes-or-no-p 'y-or-n-p) ;; y and n instead of yes or no.
(setq frame-title-format "") ;; Disable the title in emacs frame.
#+end_src

** Vertico + orderless + marginilia + embark + .. setup
#+begin_src emacs-lisp :tangle "init.el"
;; The `vertico' package applies a vertical layout to the minibuffer.
(use-package vertico
  :ensure t
  :config
  (setq vertico-cycle t)
  (setq vertico-resize nil)
  (vertico-mode 1))

;; The `marginalia' package provides helpful annotations next to
;; completion candidates in the minibuffer.
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode 1))

;; The `orderless' package lets the minibuffer use an out-of-order
;; pattern matching algorithm. 
(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic)))

;; The `consult' package provides lots of commands that are enhanced
;; variants of basic, built-in functionality.  One of the headline
;; features of `consult' is its preview facility, where it shows in
;; another Emacs window the context of what is currently matched in
;; the minibuffer.
(use-package consult
  :ensure t
  :bind (;; A recursive grep
         ("M-s M-g" . consult-grep)
         ;; Search for files names recursively
         ("M-s M-f" . consult-find)
         ;; Search through the outline (headings) of the file
         ("M-s M-o" . consult-outline)
         ;; Search the current buffer
         ("M-s M-l" . consult-line)
         ;; Switch to another buffer, or bookmarked file, or recently
         ;; opened file.
         ("M-s M-b" . consult-buffer)))

;; The built-in `savehist-mode' saves minibuffer histories.  Vertico
;; can then use that information to put recently selected options at
;; the top.
(recentf-mode 1)
(setq recentf-max-menu-items 25)  ;; number of items to show in the menu
(setq recentf-max-saved-items 100) ;; number of files to save

;; Enable savehist-mode
(savehist-mode 1)
(setq savehist-save-minibuffer-history t)
(setq history-length 100)

#+end_src
 
** Which Key
Tells you the key bindings
#+begin_src emacs-lisp :tangle "init.el"
(defun my-which-key-sort (a b)
  "Custom sort function to prioritize letters over numbers."
  (let ((key-a (car a))
        (key-b (car b)))
    (if (and (string-match-p "[a-zA-Z]" (char-to-string (aref key-a 0)))
             (not (string-match-p "[a-zA-Z]" (char-to-string (aref key-b 0)))))
        -1
      (if (and (not (string-match-p "[a-zA-Z]" (char-to-string (aref key-a 0))))
               (string-match-p "[a-zA-Z]" (char-to-string (aref key-b 0))))
          1
        (string< (char-to-string (aref key-a 0)) (char-to-string (aref key-b 0)))))))

(use-package which-key :ensure t :demand t
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'my-which-key-sort
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.1
	  which-key-page-delay 0.1
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " -> "))
#+end_src

** Whitespace-cleanup
Fix whitespaces on file save.
#+begin_src emacs-lisp :tangle "init.el"
(use-package whitespace-cleanup-mode :ensure t
 :config (global-whitespace-cleanup-mode 1))
#+end_src

** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp :tangle "init.el"
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src






